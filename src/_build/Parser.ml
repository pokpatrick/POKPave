type token =
  | DEF
  | TRUE
  | FALSE
  | END
  | NEW
  | TAU
  | DIV
  | WHEN
  | CONSTDEF
  | TYPEDEF
  | IDENT of (string)
  | CONST of (string)
  | VAR of (string)
  | NORM
  | STRUCT
  | BISIM
  | FBISIM
  | DERIV
  | LTS
  | MINI
  | FREE
  | BOUND
  | NAMES
  | HELP
  | QUIT
  | TDERIV
  | WDERIV
  | WBISIM
  | WLTS
  | INT of (int)
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COMMA
  | EQUAL
  | EQEQ
  | TILD
  | COLON
  | IF
  | THEN
  | ELSE
  | INF
  | SUP
  | INFEQ
  | SUPEQ
  | DIFF
  | DOTDOT
  | LACCOL
  | RACCOL
  | PAR
  | PLUS
  | DOT
  | OUT
  | IN
  | MINUS
  | MULT
  | MOD
  | AND
  | OR
  | NOT
  | SEMICOL
  | EOF

open Parsing;;
# 3 "Parser.mly"
  open Utils
  open Presyntax


  let rec mkRes ns p = match ns with
    | [] -> p
    | n::ns' -> PRes(n,(mkRes ns' p))

  let mkRename ns p = 
    let rec ren = function
    | [] -> p
    | (old,value) :: ns' -> PRename(old,value,(ren ns'))
    in
    ren (List.rev ns)  

(*
  let rec merge_prefix p q = match p with
    | PPrefix(a,PSilent) -> PPrefix(a,q)
    | PPrefix(a,p') -> PPrefix(a,merge_prefix p' q)
    | _ -> failwith "Not a prefixed process"*)

(***
  let parse_error s = (* Called by the parser function on error *)
    print_endline s;
    flush stdout
    (* raise Parsing.Parse_error *)
***)
# 96 "Parser.ml"
let yytransl_const = [|
  257 (* DEF *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* END *);
  261 (* NEW *);
  262 (* TAU *);
  263 (* DIV *);
  264 (* WHEN *);
  265 (* CONSTDEF *);
  266 (* TYPEDEF *);
  270 (* NORM *);
  271 (* STRUCT *);
  272 (* BISIM *);
  273 (* FBISIM *);
  274 (* DERIV *);
  275 (* LTS *);
  276 (* MINI *);
  277 (* FREE *);
  278 (* BOUND *);
  279 (* NAMES *);
  280 (* HELP *);
  281 (* QUIT *);
  282 (* TDERIV *);
  283 (* WDERIV *);
  284 (* WBISIM *);
  285 (* WLTS *);
  287 (* LPAREN *);
  288 (* RPAREN *);
  289 (* LBRACKET *);
  290 (* RBRACKET *);
  291 (* COMMA *);
  292 (* EQUAL *);
  293 (* EQEQ *);
  294 (* TILD *);
  295 (* COLON *);
  296 (* IF *);
  297 (* THEN *);
  298 (* ELSE *);
  299 (* INF *);
  300 (* SUP *);
  301 (* INFEQ *);
  302 (* SUPEQ *);
  303 (* DIFF *);
  304 (* DOTDOT *);
  305 (* LACCOL *);
  306 (* RACCOL *);
  307 (* PAR *);
  308 (* PLUS *);
  309 (* DOT *);
  310 (* OUT *);
  311 (* IN *);
  312 (* MINUS *);
  313 (* MULT *);
  314 (* MOD *);
  315 (* AND *);
  316 (* OR *);
  317 (* NOT *);
  320 (* SEMICOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  267 (* IDENT *);
  268 (* CONST *);
  269 (* VAR *);
  286 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\006\000\006\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\010\000\011\000\011\000\008\000\
\008\000\007\000\007\000\013\000\013\000\013\000\013\000\013\000\
\012\000\012\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\009\000\009\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\001\000\001\000\001\000\004\000\008\000\
\006\000\002\000\002\000\004\000\003\000\004\000\002\000\005\000\
\004\000\005\000\004\000\003\000\004\000\002\000\005\000\004\000\
\005\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\005\000\004\000\005\000\004\000\003\000\004\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\001\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\002\000\
\005\000\004\000\001\000\002\000\003\000\003\000\005\000\001\000\
\002\000\002\000\005\000\007\000\003\000\003\000\005\000\001\000\
\003\000\007\000\004\000\001\000\001\000\001\000\003\000\001\000\
\000\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\040\000\000\000\000\000\000\000\001\000\115\000\000\000\006\000\
\000\000\000\000\000\000\011\000\091\000\092\000\055\000\000\000\
\072\000\000\000\000\000\095\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\000\000\022\000\
\000\000\000\000\026\000\000\000\028\000\000\000\030\000\000\000\
\032\000\000\000\034\000\000\000\036\000\000\000\038\000\000\000\
\053\000\000\000\051\000\000\000\047\000\000\000\000\000\003\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\094\000\093\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\068\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\085\000\088\000\000\000\086\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\070\000\098\000\000\000\000\000\000\000\000\000\061\000\000\000\
\063\000\000\000\058\000\000\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\105\000\000\000\000\000\014\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\090\000\004\000\005\000\000\000\000\000\000\000\000\000\
\000\000\114\000\066\000\000\000\000\000\077\000\000\000\000\000\
\018\000\000\000\025\000\000\000\043\000\000\000\087\000\000\000\
\000\000\009\000\081\000\000\000\000\000\000\000\000\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\079\000\
\076\000"

let yydgoto = "\002\000\
\022\000\043\000\044\000\045\000\023\000\181\000\024\000\132\000\
\135\000\093\000\142\000\125\000\126\000"

let yysindex = "\017\000\
\001\000\000\000\009\255\010\255\015\255\121\000\135\000\061\000\
\000\255\181\000\195\000\241\000\255\000\045\001\059\001\000\000\
\000\000\105\001\119\001\075\000\000\000\000\000\017\255\000\000\
\244\254\249\254\250\254\000\000\000\000\000\000\000\000\008\255\
\000\000\032\255\038\255\000\000\000\000\000\000\126\004\126\004\
\138\004\138\004\051\000\021\255\162\004\000\000\132\255\000\000\
\126\004\033\255\000\000\126\004\000\000\051\000\000\000\051\000\
\000\000\051\000\000\000\051\000\000\000\051\000\000\000\051\000\
\000\000\051\000\000\000\051\000\000\000\126\004\125\255\000\000\
\000\000\029\255\126\004\013\255\039\255\041\255\138\004\138\004\
\123\255\006\000\136\004\000\000\000\000\138\004\056\003\042\005\
\000\000\062\255\165\001\179\001\000\000\000\000\225\001\138\004\
\138\004\138\004\138\004\138\004\138\004\138\004\138\004\043\255\
\058\255\138\004\138\004\138\004\138\004\138\004\000\000\239\001\
\008\000\000\000\029\002\038\000\111\000\000\000\043\002\000\000\
\000\000\000\000\070\255\000\000\069\255\029\255\051\000\000\000\
\011\255\041\255\076\255\080\255\193\004\026\003\081\255\000\000\
\000\000\000\000\220\004\138\004\112\255\088\255\000\000\025\255\
\000\000\012\255\000\000\012\255\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\004\255\138\004\111\255\004\255\000\000\
\000\000\067\005\067\005\000\000\051\000\000\000\089\002\000\000\
\051\000\000\000\103\002\000\000\149\002\000\000\051\000\115\255\
\091\255\000\000\000\000\000\000\089\255\078\255\041\255\126\004\
\126\004\000\000\000\000\239\004\118\255\000\000\024\005\092\255\
\000\000\051\000\000\000\051\000\000\000\051\000\000\000\126\004\
\011\255\000\000\000\000\012\255\051\000\138\004\104\255\000\000\
\129\255\051\000\109\255\042\005\062\255\110\255\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\154\255\000\000\000\000\189\255\000\000\000\000\
\000\000\000\000\084\255\186\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\255\000\000\086\255\
\000\000\093\255\000\000\103\255\000\000\106\255\000\000\107\255\
\000\000\114\255\000\000\117\255\000\000\000\000\000\000\000\000\
\000\000\113\255\000\000\000\000\000\000\000\000\000\000\141\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\255\
\083\255\000\000\000\000\000\000\000\000\000\000\027\255\000\000\
\000\000\100\255\000\000\000\000\000\000\108\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\113\255\121\255\000\000\
\000\000\000\000\252\254\000\000\000\000\141\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\246\000\000\000\050\001\000\000\077\003\093\003\138\003\
\154\003\199\003\215\003\172\002\000\000\000\000\227\002\000\000\
\000\000\004\004\020\004\000\000\139\255\204\255\000\000\000\000\
\143\255\254\255\000\000\004\000\000\000\000\000\151\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\152\255\000\000\153\255\000\000\155\255\000\000\000\000\
\000\000\000\000\000\000\110\001\170\001\000\000\148\255\000\000\
\000\000\156\255\000\000\081\004\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\251\255\000\000\252\255\000\000\199\255\000\000\130\255\
\059\000\000\000\237\255\098\000\000\000"

let yytablesize = 1661
let yytable = "\051\000\
\021\000\047\000\050\000\182\000\054\000\056\000\058\000\060\000\
\062\000\064\000\096\000\089\000\066\000\068\000\071\000\073\000\
\072\000\001\000\074\000\025\000\094\000\026\000\179\000\075\000\
\089\000\027\000\013\000\080\000\076\000\077\000\120\000\121\000\
\114\000\081\000\082\000\083\000\087\000\088\000\078\000\122\000\
\180\000\123\000\128\000\113\000\090\000\080\000\116\000\073\000\
\073\000\073\000\073\000\131\000\073\000\073\000\052\000\095\000\
\203\000\090\000\124\000\064\000\107\000\108\000\079\000\064\000\
\117\000\090\000\073\000\073\000\080\000\127\000\115\000\129\000\
\141\000\157\000\133\000\134\000\092\000\064\000\064\000\073\000\
\073\000\139\000\074\000\091\000\092\000\144\000\146\000\130\000\
\158\000\148\000\013\000\149\000\150\000\151\000\152\000\153\000\
\154\000\155\000\156\000\020\000\177\000\159\000\160\000\161\000\
\162\000\163\000\165\000\045\000\176\000\169\000\183\000\184\000\
\187\000\175\000\074\000\074\000\074\000\074\000\189\000\074\000\
\074\000\190\000\089\000\192\000\118\000\199\000\200\000\202\000\
\207\000\134\000\209\000\111\000\064\000\074\000\074\000\188\000\
\201\000\064\000\213\000\214\000\064\000\217\000\215\000\211\000\
\089\000\064\000\074\000\010\000\027\000\029\000\064\000\064\000\
\191\000\067\000\136\000\090\000\031\000\090\000\064\000\064\000\
\094\000\194\000\119\000\020\000\090\000\196\000\033\000\198\000\
\112\000\035\000\037\000\045\000\113\000\091\000\092\000\091\000\
\092\000\052\000\204\000\205\000\050\000\078\000\091\000\092\000\
\083\000\067\000\067\000\067\000\054\000\094\000\067\000\067\000\
\186\000\216\000\210\000\093\000\094\000\094\000\094\000\094\000\
\094\000\212\000\012\000\017\000\067\000\067\000\019\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\044\000\016\000\
\023\000\067\000\041\000\082\000\054\000\054\000\054\000\178\000\
\093\000\054\000\054\000\000\000\000\000\000\000\000\000\093\000\
\093\000\093\000\093\000\093\000\064\000\000\000\000\000\054\000\
\054\000\064\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\000\000\000\000\000\000\054\000\024\000\064\000\064\000\
\000\000\003\000\000\000\042\000\000\000\089\000\000\000\166\000\
\000\000\004\000\005\000\017\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\000\000\064\000\000\000\
\000\000\000\000\000\000\064\000\064\000\170\000\090\000\137\000\
\090\000\064\000\000\000\000\000\000\000\167\000\000\000\096\000\
\064\000\064\000\089\000\000\000\000\000\000\000\064\000\064\000\
\091\000\092\000\091\000\092\000\048\000\024\000\029\000\030\000\
\031\000\032\000\033\000\042\000\034\000\000\000\090\000\035\000\
\036\000\037\000\069\000\171\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\090\000\000\000\035\000\036\000\037\000\
\091\000\092\000\038\000\039\000\103\000\040\000\000\000\000\000\
\106\000\107\000\108\000\000\000\041\000\091\000\092\000\000\000\
\038\000\039\000\000\000\040\000\000\000\000\000\172\000\000\000\
\000\000\000\000\041\000\049\000\000\000\000\000\000\000\000\000\
\028\000\042\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\070\000\000\000\035\000\036\000\037\000\046\000\042\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\090\000\
\000\000\035\000\036\000\037\000\173\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\091\000\092\000\000\000\038\000\039\000\000\000\040\000\
\000\000\000\000\000\000\060\000\000\000\060\000\041\000\000\000\
\060\000\060\000\000\000\000\000\053\000\042\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\000\000\060\000\035\000\
\036\000\037\000\055\000\042\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\060\000\000\000\035\000\036\000\037\000\
\000\000\000\000\038\000\039\000\000\000\040\000\000\000\000\000\
\000\000\056\000\056\000\056\000\041\000\000\000\056\000\056\000\
\038\000\039\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\056\000\056\000\000\000\000\000\
\057\000\042\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\056\000\000\000\035\000\036\000\037\000\059\000\042\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\000\000\
\000\000\035\000\036\000\037\000\000\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\062\000\000\000\062\000\
\041\000\000\000\062\000\062\000\038\000\039\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\062\000\062\000\000\000\000\000\061\000\042\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\062\000\000\000\035\000\
\036\000\037\000\063\000\042\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\000\000\000\000\035\000\036\000\037\000\
\000\000\000\000\038\000\039\000\000\000\040\000\000\000\000\000\
\000\000\057\000\000\000\057\000\041\000\000\000\057\000\057\000\
\038\000\039\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\057\000\057\000\000\000\000\000\
\065\000\042\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\057\000\000\000\035\000\036\000\037\000\067\000\042\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\000\000\
\000\000\035\000\036\000\037\000\000\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\065\000\000\000\065\000\
\041\000\000\000\065\000\065\000\038\000\039\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\065\000\065\000\000\000\000\000\143\000\042\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\065\000\000\000\035\000\
\036\000\037\000\145\000\042\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\000\000\000\000\035\000\036\000\037\000\
\000\000\000\000\038\000\039\000\000\000\040\000\000\000\000\000\
\000\000\071\000\000\000\071\000\041\000\000\000\071\000\071\000\
\038\000\039\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\147\000\042\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\071\000\000\000\035\000\036\000\037\000\164\000\042\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\000\000\
\000\000\035\000\036\000\037\000\000\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\038\000\039\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\168\000\042\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\000\000\000\000\035\000\
\036\000\037\000\174\000\042\000\029\000\030\000\031\000\032\000\
\033\000\000\000\034\000\000\000\000\000\035\000\036\000\037\000\
\000\000\000\000\038\000\039\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\038\000\039\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\193\000\042\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\000\000\000\000\035\000\036\000\037\000\195\000\042\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\000\000\
\000\000\035\000\036\000\037\000\000\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\038\000\039\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\197\000\042\000\029\000\030\000\
\031\000\032\000\033\000\000\000\034\000\000\000\000\000\035\000\
\036\000\037\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\101\000\000\000\
\000\000\000\000\038\000\039\000\000\000\040\000\101\000\101\000\
\101\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\101\000\000\000\101\000\101\000\101\000\000\000\101\000\
\000\000\042\000\000\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\000\000\000\000\000\000\000\000\101\000\
\000\000\101\000\101\000\101\000\102\000\102\000\101\000\101\000\
\101\000\000\000\000\000\000\000\000\000\102\000\102\000\102\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\102\000\000\000\102\000\102\000\102\000\000\000\102\000\000\000\
\000\000\000\000\102\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\000\000\000\000\000\000\000\000\102\000\000\000\
\102\000\102\000\102\000\029\000\030\000\102\000\102\000\102\000\
\096\000\000\000\000\000\000\000\084\000\036\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
\000\000\000\000\086\000\000\000\000\000\097\000\096\000\000\000\
\000\000\041\000\000\000\000\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\103\000\108\000\108\000\
\000\000\106\000\107\000\108\000\109\000\110\000\042\000\108\000\
\108\000\108\000\000\000\097\000\000\000\000\000\106\000\106\000\
\140\000\000\000\098\000\099\000\100\000\101\000\102\000\106\000\
\106\000\106\000\108\000\103\000\108\000\108\000\108\000\106\000\
\107\000\108\000\109\000\110\000\108\000\108\000\108\000\000\000\
\000\000\000\000\106\000\000\000\106\000\106\000\106\000\000\000\
\000\000\000\000\108\000\108\000\106\000\106\000\106\000\108\000\
\108\000\108\000\000\000\107\000\107\000\000\000\000\000\000\000\
\000\000\000\000\106\000\106\000\107\000\107\000\107\000\106\000\
\106\000\106\000\000\000\110\000\110\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\110\000\110\000\110\000\107\000\
\000\000\107\000\107\000\107\000\000\000\000\000\000\000\000\000\
\000\000\107\000\107\000\107\000\000\000\000\000\000\000\110\000\
\000\000\110\000\110\000\110\000\000\000\000\000\000\000\107\000\
\107\000\110\000\110\000\110\000\107\000\107\000\107\000\000\000\
\111\000\111\000\000\000\000\000\000\000\000\000\000\000\110\000\
\110\000\111\000\111\000\111\000\110\000\110\000\110\000\000\000\
\109\000\109\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\109\000\109\000\109\000\111\000\000\000\111\000\111\000\
\111\000\000\000\000\000\000\000\000\000\000\000\111\000\111\000\
\111\000\000\000\000\000\000\000\109\000\000\000\109\000\109\000\
\109\000\000\000\000\000\000\000\111\000\111\000\109\000\109\000\
\109\000\111\000\111\000\111\000\000\000\099\000\099\000\000\000\
\000\000\000\000\000\000\000\000\109\000\109\000\099\000\099\000\
\099\000\109\000\109\000\109\000\000\000\100\000\100\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\000\100\000\
\100\000\099\000\000\000\099\000\099\000\099\000\000\000\000\000\
\000\000\000\000\000\000\099\000\099\000\099\000\000\000\000\000\
\000\000\100\000\000\000\100\000\100\000\100\000\000\000\000\000\
\000\000\099\000\099\000\100\000\100\000\100\000\099\000\099\000\
\099\000\000\000\097\000\097\000\000\000\000\000\000\000\000\000\
\000\000\100\000\100\000\097\000\097\000\097\000\100\000\100\000\
\100\000\000\000\112\000\112\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\112\000\112\000\097\000\000\000\
\097\000\097\000\097\000\000\000\000\000\000\000\000\000\000\000\
\097\000\097\000\097\000\000\000\000\000\000\000\112\000\000\000\
\112\000\112\000\112\000\000\000\000\000\000\000\097\000\097\000\
\112\000\112\000\112\000\000\000\000\000\097\000\000\000\029\000\
\030\000\031\000\032\000\033\000\000\000\034\000\112\000\112\000\
\035\000\036\000\037\000\029\000\030\000\112\000\096\000\000\000\
\000\000\000\000\000\000\000\000\084\000\036\000\037\000\000\000\
\000\000\000\000\000\000\038\000\039\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\085\000\
\096\000\138\000\086\000\097\000\000\000\000\000\000\000\000\000\
\000\000\041\000\098\000\099\000\100\000\101\000\102\000\000\000\
\000\000\000\000\042\000\103\000\000\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\000\000\097\000\042\000\096\000\
\000\000\000\000\000\000\000\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\103\000\000\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\000\000\000\000\
\185\000\000\000\096\000\000\000\097\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\103\000\096\000\000\000\000\000\
\106\000\107\000\108\000\109\000\110\000\138\000\000\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\098\000\099\000\
\100\000\101\000\102\000\000\000\000\000\000\000\000\000\103\000\
\000\000\000\000\097\000\106\000\107\000\108\000\109\000\110\000\
\206\000\098\000\099\000\100\000\101\000\102\000\096\000\000\000\
\000\000\000\000\103\000\000\000\000\000\000\000\106\000\107\000\
\108\000\109\000\110\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\000\000\000\000\000\000\000\000\000\000\208\000\
\000\000\000\000\000\000\097\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\000\099\000\100\000\101\000\102\000\000\000\
\000\000\096\000\000\000\103\000\000\000\097\000\000\000\106\000\
\107\000\108\000\109\000\110\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\103\000\000\000\000\000\
\000\000\106\000\107\000\108\000\109\000\110\000\097\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\000\099\000\100\000\
\101\000\102\000\000\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\106\000\107\000\108\000"

let yycheck = "\000\001\
\000\000\007\000\008\000\130\000\010\000\011\000\012\000\013\000\
\014\000\015\000\007\001\000\001\018\000\019\000\020\000\000\001\
\000\001\001\000\031\001\011\001\000\001\012\001\012\001\036\001\
\000\001\011\001\000\001\032\001\036\001\036\001\002\001\003\001\
\000\001\039\000\040\000\040\000\041\000\042\000\031\001\011\001\
\030\001\013\001\030\001\049\000\033\001\050\001\052\000\032\001\
\033\001\034\001\035\001\011\001\037\001\038\001\055\001\035\001\
\183\000\033\001\030\001\033\001\057\001\058\001\031\001\037\001\
\070\000\033\001\051\001\052\001\031\001\075\000\038\001\033\001\
\011\001\031\001\079\000\080\000\052\001\051\001\052\001\064\001\
\064\001\086\000\000\001\051\001\052\001\091\000\092\000\049\001\
\031\001\095\000\064\001\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\000\001\032\001\106\000\107\000\108\000\
\109\000\110\000\112\000\000\001\039\001\115\000\035\001\032\001\
\032\001\119\000\032\001\033\001\034\001\035\001\007\001\037\001\
\038\001\034\001\000\001\013\001\000\001\011\001\036\001\050\001\
\011\001\134\000\039\001\000\001\033\001\051\001\052\001\140\000\
\048\001\038\001\035\001\011\001\033\001\032\001\034\001\201\000\
\032\001\038\001\064\001\064\001\064\001\064\001\051\001\052\001\
\157\000\000\001\032\001\033\001\064\001\033\001\051\001\052\001\
\007\001\167\000\038\001\064\001\033\001\171\000\064\001\173\000\
\037\001\064\001\064\001\064\001\032\001\051\001\052\001\051\001\
\052\001\064\001\184\000\185\000\064\001\034\001\051\001\052\001\
\064\001\032\001\033\001\034\001\000\001\036\001\037\001\038\001\
\134\000\213\000\200\000\007\001\043\001\044\001\045\001\046\001\
\047\001\206\000\064\001\000\001\051\001\052\001\064\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\064\001\064\001\
\064\001\064\001\064\001\064\001\032\001\033\001\034\001\126\000\
\036\001\037\001\038\001\255\255\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\033\001\255\255\255\255\051\001\
\052\001\038\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\255\255\255\255\255\255\064\001\000\001\051\001\052\001\
\255\255\001\001\255\255\000\001\255\255\000\001\255\255\000\001\
\255\255\009\001\010\001\064\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\033\001\255\255\
\255\255\255\255\255\255\038\001\033\001\000\001\033\001\034\001\
\033\001\038\001\255\255\255\255\255\255\038\001\255\255\007\001\
\051\001\052\001\000\001\255\255\255\255\255\255\051\001\052\001\
\051\001\052\001\051\001\052\001\000\001\064\001\002\001\003\001\
\004\001\005\001\006\001\064\001\008\001\255\255\033\001\011\001\
\012\001\013\001\000\001\038\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\033\001\255\255\011\001\012\001\013\001\
\051\001\052\001\030\001\031\001\052\001\033\001\255\255\255\255\
\056\001\057\001\058\001\255\255\040\001\051\001\052\001\255\255\
\030\001\031\001\255\255\033\001\255\255\255\255\000\001\255\255\
\255\255\255\255\040\001\055\001\255\255\255\255\255\255\255\255\
\000\001\061\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\055\001\255\255\011\001\012\001\013\001\000\001\061\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\033\001\
\255\255\011\001\012\001\013\001\038\001\255\255\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\051\001\052\001\255\255\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\032\001\255\255\034\001\040\001\255\255\
\037\001\038\001\255\255\255\255\000\001\061\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\255\255\051\001\011\001\
\012\001\013\001\000\001\061\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\064\001\255\255\011\001\012\001\013\001\
\255\255\255\255\030\001\031\001\255\255\033\001\255\255\255\255\
\255\255\032\001\033\001\034\001\040\001\255\255\037\001\038\001\
\030\001\031\001\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\051\001\052\001\255\255\255\255\
\000\001\061\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\064\001\255\255\011\001\012\001\013\001\000\001\061\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\255\255\255\255\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\032\001\255\255\034\001\
\040\001\255\255\037\001\038\001\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\051\001\052\001\255\255\255\255\000\001\061\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\064\001\255\255\011\001\
\012\001\013\001\000\001\061\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\030\001\031\001\255\255\033\001\255\255\255\255\
\255\255\032\001\255\255\034\001\040\001\255\255\037\001\038\001\
\030\001\031\001\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\051\001\052\001\255\255\255\255\
\000\001\061\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\064\001\255\255\011\001\012\001\013\001\000\001\061\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\255\255\255\255\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\032\001\255\255\034\001\
\040\001\255\255\037\001\038\001\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\051\001\052\001\255\255\255\255\000\001\061\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\064\001\255\255\011\001\
\012\001\013\001\000\001\061\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\030\001\031\001\255\255\033\001\255\255\255\255\
\255\255\032\001\255\255\034\001\040\001\255\255\037\001\038\001\
\030\001\031\001\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\000\001\061\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\064\001\255\255\011\001\012\001\013\001\000\001\061\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\255\255\255\255\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\255\255\255\255\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\000\001\061\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\255\255\255\255\011\001\
\012\001\013\001\000\001\061\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\030\001\031\001\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\255\255\255\255\
\030\001\031\001\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\000\001\061\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\255\255\255\255\011\001\012\001\013\001\000\001\061\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\255\255\
\255\255\011\001\012\001\013\001\255\255\255\255\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\255\255\255\255\030\001\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\000\001\061\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\255\255\255\255\011\001\
\012\001\013\001\255\255\061\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\255\255\255\255\030\001\031\001\255\255\033\001\011\001\012\001\
\013\001\255\255\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\255\255\036\001\
\255\255\061\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\255\255\255\255\052\001\
\255\255\054\001\055\001\056\001\002\001\003\001\059\001\060\001\
\061\001\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\033\001\034\001\255\255\036\001\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\052\001\255\255\
\054\001\055\001\056\001\002\001\003\001\059\001\060\001\061\001\
\007\001\255\255\255\255\255\255\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\255\255\255\255\033\001\255\255\255\255\036\001\007\001\255\255\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\255\255\255\255\255\255\255\255\052\001\002\001\003\001\
\255\255\056\001\057\001\058\001\059\001\060\001\061\001\011\001\
\012\001\013\001\255\255\036\001\255\255\255\255\002\001\003\001\
\041\001\255\255\043\001\044\001\045\001\046\001\047\001\011\001\
\012\001\013\001\030\001\052\001\032\001\033\001\034\001\056\001\
\057\001\058\001\059\001\060\001\040\001\041\001\042\001\255\255\
\255\255\255\255\030\001\255\255\032\001\033\001\034\001\255\255\
\255\255\255\255\054\001\055\001\040\001\041\001\042\001\059\001\
\060\001\061\001\255\255\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\054\001\055\001\011\001\012\001\013\001\059\001\
\060\001\061\001\255\255\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\030\001\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\255\255\255\255\255\255\030\001\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\054\001\
\055\001\040\001\041\001\042\001\059\001\060\001\061\001\255\255\
\002\001\003\001\255\255\255\255\255\255\255\255\255\255\054\001\
\055\001\011\001\012\001\013\001\059\001\060\001\061\001\255\255\
\002\001\003\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\030\001\255\255\032\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\255\255\255\255\255\255\030\001\255\255\032\001\033\001\
\034\001\255\255\255\255\255\255\054\001\055\001\040\001\041\001\
\042\001\059\001\060\001\061\001\255\255\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\054\001\055\001\011\001\012\001\
\013\001\059\001\060\001\061\001\255\255\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\030\001\255\255\032\001\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\255\255\255\255\
\255\255\054\001\055\001\040\001\041\001\042\001\059\001\060\001\
\061\001\255\255\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\054\001\055\001\011\001\012\001\013\001\059\001\060\001\
\061\001\255\255\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\030\001\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\255\255\255\255\255\255\030\001\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\054\001\055\001\
\040\001\041\001\042\001\255\255\255\255\061\001\255\255\002\001\
\003\001\004\001\005\001\006\001\255\255\008\001\054\001\055\001\
\011\001\012\001\013\001\002\001\003\001\061\001\007\001\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\030\001\
\007\001\034\001\033\001\036\001\255\255\255\255\255\255\255\255\
\255\255\040\001\043\001\044\001\045\001\046\001\047\001\255\255\
\255\255\255\255\061\001\052\001\255\255\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\255\255\036\001\061\001\007\001\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\255\255\255\255\255\255\255\255\052\001\255\255\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\255\255\255\255\
\032\001\255\255\007\001\255\255\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\255\255\255\255\255\255\255\255\052\001\007\001\255\255\255\255\
\056\001\057\001\058\001\059\001\060\001\034\001\255\255\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\255\255\255\255\052\001\
\255\255\255\255\036\001\056\001\057\001\058\001\059\001\060\001\
\042\001\043\001\044\001\045\001\046\001\047\001\007\001\255\255\
\255\255\255\255\052\001\255\255\255\255\255\255\056\001\057\001\
\058\001\059\001\060\001\255\255\255\255\255\255\255\255\255\255\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\036\001\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\255\255\
\255\255\007\001\255\255\052\001\255\255\036\001\255\255\056\001\
\057\001\058\001\059\001\060\001\043\001\044\001\045\001\046\001\
\047\001\255\255\255\255\255\255\255\255\052\001\255\255\255\255\
\255\255\056\001\057\001\058\001\059\001\060\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\052\001\255\255\
\255\255\255\255\056\001\057\001\058\001"

let yynames_const = "\
  DEF\000\
  TRUE\000\
  FALSE\000\
  END\000\
  NEW\000\
  TAU\000\
  DIV\000\
  WHEN\000\
  CONSTDEF\000\
  TYPEDEF\000\
  NORM\000\
  STRUCT\000\
  BISIM\000\
  FBISIM\000\
  DERIV\000\
  LTS\000\
  MINI\000\
  FREE\000\
  BOUND\000\
  NAMES\000\
  HELP\000\
  QUIT\000\
  TDERIV\000\
  WDERIV\000\
  WBISIM\000\
  WLTS\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  EQUAL\000\
  EQEQ\000\
  TILD\000\
  COLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  INF\000\
  SUP\000\
  INFEQ\000\
  SUPEQ\000\
  DIFF\000\
  DOTDOT\000\
  LACCOL\000\
  RACCOL\000\
  PAR\000\
  PLUS\000\
  DOT\000\
  OUT\000\
  IN\000\
  MINUS\000\
  MULT\000\
  MOD\000\
  AND\000\
  OR\000\
  NOT\000\
  SEMICOL\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  CONST\000\
  VAR\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "Parser.mly"
        ( false )
# 794 "Parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 95 "Parser.mly"
                      ( true )
# 801 "Parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 96 "Parser.mly"
                    ( raise (Fatal_Parse_Error "missing ';' after statement") )
# 808 "Parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "Parser.mly"
          ( _1 )
# 815 "Parser.ml"
               : 'minmax))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "Parser.mly"
        ( (string_of_int _1) )
# 822 "Parser.ml"
               : 'minmax))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'definition) in
    Obj.repr(
# 104 "Parser.mly"
      ( let defs = definitions_of_predefinition _1
        in
          List.iter Control.handle_definition defs 
      )
# 832 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 109 "Parser.mly"
      ( Control.handle_constdef _2 _4 )
# 840 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'minmax) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'minmax) in
    Obj.repr(
# 111 "Parser.mly"
      ( Control.handle_typedef_range _2 _5 _7 )
# 849 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'list_of_names) in
    Obj.repr(
# 113 "Parser.mly"
      ( Control.handle_typedef_enum _2 _5 )
# 857 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 115 "Parser.mly"
      ( Control.handle_normalization (process_of_preprocess _2) )
# 864 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process to normalize") )
# 870 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 119 "Parser.mly"
      ( Control.handle_struct_congr 
        (process_of_preprocess _2)
        (process_of_preprocess _4) )
# 880 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 123 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '==' for structural congruence") )
# 887 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 125 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '==' for structural congruence") )
# 894 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "Parser.mly"
      (raise (Fatal_Parse_Error "missing process before '==' for structural congruence") )
# 900 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 129 "Parser.mly"
      ( Control.handle_is_bisim 
        (process_of_preprocess _3) 
        (process_of_preprocess _5) )
# 910 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 133 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '~' for strong bisimilarity") )
# 917 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 135 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '~' for strong bisimilarity") )
# 924 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 137 "Parser.mly"
      ( Control.handle_bisim 
        (process_of_preprocess _2)
        (process_of_preprocess _4) )
# 934 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 141 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '~' for strong bisimilarity") )
# 941 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 143 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '~' for strong bisimilarity") )
# 948 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '?' or process before '~' for strong bisimilarity") )
# 954 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 147 "Parser.mly"
      ( Control.handle_is_fbisim 
        (process_of_preprocess _3)
        (process_of_preprocess _5) )
# 964 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 151 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '~' for strong bisimilarity") )
# 971 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 153 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '~' for strong bisimilarity") )
# 978 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '?' or process before '~' for strong bisimilarity") )
# 984 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 157 "Parser.mly"
      ( Control.handle_deriv (process_of_preprocess _2) )
# 991 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process to derivate") )
# 997 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 161 "Parser.mly"
      ( Control.handle_lts (process_of_preprocess _2) )
# 1004 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for LTS") )
# 1010 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 165 "Parser.mly"
      ( Control.handle_minimization (process_of_preprocess _2) )
# 1017 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "Parser.mly"
      (raise (Fatal_Parse_Error "missing process for minimization") )
# 1023 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 169 "Parser.mly"
      ( Control.handle_free (process_of_preprocess _2) )
# 1030 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for free names") )
# 1036 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 173 "Parser.mly"
      ( Control.handle_bound (process_of_preprocess _2) )
# 1043 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for bound names") )
# 1049 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 177 "Parser.mly"
      ( Control.handle_names (process_of_preprocess _2) )
# 1056 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for names") )
# 1062 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "Parser.mly"
      ( Control.handle_help () )
# 1068 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "Parser.mly"
      ( Control.handle_quit () )
# 1074 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 186 "Parser.mly"
      ( Control.handle_is_wbisim 
        (process_of_preprocess _3) 
        (process_of_preprocess _5) )
# 1084 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 190 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '~' for weak bisimilarity") )
# 1091 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 192 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '~' for weak bisimilarity") )
# 1098 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 194 "Parser.mly"
      ( Control.handle_wbisim 
        (process_of_preprocess _2)
        (process_of_preprocess _4) )
# 1108 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 198 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '~' for weak bisimilarity") )
# 1115 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 200 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process after '~' for weak bisimilarity") )
# 1122 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing '?' or process before '~' for weak bisimilarity") )
# 1128 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 204 "Parser.mly"
      ( Control.handle_deriv (process_of_preprocess _2) )
# 1135 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process to derivate") )
# 1141 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 208 "Parser.mly"
      ( Control.handle_deriv (process_of_preprocess _2) )
# 1148 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for the weak derivation") )
# 1154 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 212 "Parser.mly"
      ( Control.handle_tderiv (process_of_preprocess _2) )
# 1161 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 214 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing process for the silent derivation") )
# 1167 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 219 "Parser.mly"
      ( if _1 = 0 then PSilent 
        else raise (Fatal_Parse_Error "Only 0 can be used as Silent process") )
# 1175 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "Parser.mly"
      ( PSilent )
# 1181 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : preprefix) in
    Obj.repr(
# 223 "Parser.mly"
           ( PPrefix(_1,PSilent) )
# 1188 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 224 "Parser.mly"
                         ( PPrefix(_1,_3) )
# 1196 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprefix) in
    Obj.repr(
# 226 "Parser.mly"
      ( raise (Fatal_Parse_Error "right-hand process missing after prefix") )
# 1203 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preprefix) in
    Obj.repr(
# 228 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing ',' after prefix") )
# 1210 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 229 "Parser.mly"
                        (  PPar(_1,_3) )
# 1218 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 231 "Parser.mly"
      ( raise (Fatal_Parse_Error "right-hand process missing in parallel") )
# 1225 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 232 "Parser.mly"
                         ( PSum(_1,_3) )
# 1233 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preprocess) in
    Obj.repr(
# 234 "Parser.mly"
      ( raise (Fatal_Parse_Error "right-hand process missing in sum") )
# 1240 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 236 "Parser.mly"
      ( raise (Fatal_Parse_Error "missing parallel '||' or sum '+' symbol after process"); )
# 1247 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'list_of_names) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 237 "Parser.mly"
                                                        ( mkRes _3 _5 )
# 1255 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_of_exprs) in
    Obj.repr(
# 238 "Parser.mly"
                                      ( PCall(_1,_3) )
# 1263 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 239 "Parser.mly"
          ( PCall(_1,[]) )
# 1270 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rename) in
    Obj.repr(
# 240 "Parser.mly"
                   ( mkRename _2 _1 )
# 1278 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 241 "Parser.mly"
                          ( _2 )
# 1285 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preprocess) in
    Obj.repr(
# 242 "Parser.mly"
                              ( _2 )
# 1292 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 244 "Parser.mly"
                                     ( PGuard(_3, _5) )
# 1300 "Parser.ml"
               : preprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "Parser.mly"
              ( PTau )
# 1306 "Parser.ml"
               : preprefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preexpr) in
    Obj.repr(
# 248 "Parser.mly"
             ( POut(_1) )
# 1313 "Parser.ml"
               : preprefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preexpr) in
    Obj.repr(
# 249 "Parser.mly"
             ( PIn(_1) )
# 1320 "Parser.ml"
               : preprefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : preexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : preexpr) in
    Obj.repr(
# 250 "Parser.mly"
                                ( PSend(_1,_4) )
# 1328 "Parser.ml"
               : preprefix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : preexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 251 "Parser.mly"
                                          ( PReceive(_1,_4,_6) )
# 1337 "Parser.ml"
               : preprefix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_of_renames) in
    Obj.repr(
# 254 "Parser.mly"
                                       ( _2 )
# 1344 "Parser.ml"
               : 'rename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 257 "Parser.mly"
                    ( [(_3,_1)] )
# 1352 "Parser.ml"
               : 'list_of_renames))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_renames) in
    Obj.repr(
# 258 "Parser.mly"
                                          ( (_3,_1) :: _5 )
# 1361 "Parser.ml"
               : 'list_of_renames))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 261 "Parser.mly"
          ( [_1] )
# 1368 "Parser.ml"
               : 'list_of_names))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_names) in
    Obj.repr(
# 262 "Parser.mly"
                              ( _1::_3 )
# 1376 "Parser.ml"
               : 'list_of_names))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'list_of_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 265 "Parser.mly"
                                                         (PDefinition(_2,_4,_7))
# 1385 "Parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : preprocess) in
    Obj.repr(
# 266 "Parser.mly"
                            ( PDefinition(_2,[],_4) )
# 1393 "Parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "Parser.mly"
         ( PParamBool true )
# 1399 "Parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "Parser.mly"
          ( PParamBool false )
# 1405 "Parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 271 "Parser.mly"
        ( PParamInt _1 )
# 1412 "Parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "Parser.mly"
                    ( PParamVar (_1,_3) )
# 1420 "Parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 273 "Parser.mly"
          ( PParamName _1 )
# 1427 "Parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "Parser.mly"
                ( [] )
# 1433 "Parser.ml"
               : 'list_of_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_params) in
    Obj.repr(
# 277 "Parser.mly"
                         ( _1::_2 )
# 1441 "Parser.ml"
               : 'list_of_params))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "Parser.mly"
         ( PTrue )
# 1447 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "Parser.mly"
          ( PFalse )
# 1453 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 282 "Parser.mly"
        ( PInt _1 )
# 1460 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 283 "Parser.mly"
          ( PName _1 )
# 1467 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 284 "Parser.mly"
          ( PConst _1 )
# 1474 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 285 "Parser.mly"
        ( PVar _1 )
# 1481 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 286 "Parser.mly"
             ( PNot _2 )
# 1488 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : preexpr) in
    Obj.repr(
# 287 "Parser.mly"
                           ( PParent (_2) )
# 1495 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 288 "Parser.mly"
                  ( PAnd (_1,_3) )
# 1503 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 289 "Parser.mly"
                 ( POr (_1,_3) )
# 1511 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 290 "Parser.mly"
                   ( PAdd (_1,_3) )
# 1519 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 291 "Parser.mly"
                    ( PSub (_1,_3) )
# 1527 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 292 "Parser.mly"
                   ( PMul (_1,_3) )
# 1535 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 293 "Parser.mly"
                  ( PDiv (_1,_3) )
# 1543 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 294 "Parser.mly"
                  ( PMod (_1,_3) )
# 1551 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 295 "Parser.mly"
                  ( PInf (_1,_3) )
# 1559 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 296 "Parser.mly"
                  ( PSup (_1,_3) )
# 1567 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 297 "Parser.mly"
                    ( PEq (_1,_3) )
# 1575 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 298 "Parser.mly"
                   ( PNeq (_1,_3) )
# 1583 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 299 "Parser.mly"
                    ( PInfEq (_1,_3) )
# 1591 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 300 "Parser.mly"
                    ( PSupEq (_1,_3) )
# 1599 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : preexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : preexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : preexpr) in
    Obj.repr(
# 301 "Parser.mly"
                                ( PIf(_2,_4,_6) )
# 1608 "Parser.ml"
               : preexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "Parser.mly"
                ( [] )
# 1614 "Parser.ml"
               : 'list_of_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : preexpr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_exprs) in
    Obj.repr(
# 305 "Parser.mly"
                       ( _1::_2 )
# 1622 "Parser.ml"
               : 'list_of_exprs))
(* Entry script *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let script (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : bool)
;;
# 308 "Parser.mly"
(* end of grammar *)
# 1649 "Parser.ml"
